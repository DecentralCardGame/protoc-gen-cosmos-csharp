package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func parsePathName(path string) string {
	paths := strings.Split(path, ".")

	var newPaths []string

	for _, p := range paths[1:] {
		newPaths = append(newPaths, strings.Title(p))
	}

	return strings.Join(newPaths, ".")
}

func generateMethod(msg *descriptorpb.MethodDescriptorProto) string {
	var outpT = parsePathName(*msg.OutputType)
	return fmt.Sprintf(`
		public Task<Cosmcs.Client.ClientResponse<%s>> SendMsg%s(%s msg, Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/%s"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<%s>(
				r.Result,
				%s.Parser
			));
		}
`,
		outpT,
		*msg.Name,
		parsePathName(*msg.InputType),
		strings.Trim(*msg.InputType, "."),
		outpT, outpT,
	)
}

func generateService(service *descriptorpb.ServiceDescriptorProto) string {
	var inner = ""
	for _, msg := range service.Method {
		inner += generateMethod(msg)
	}
	return fmt.Sprintf(`
	public class %sClient {
		public IClient Client { get; }

		public %sClient (IClient client) {
			Client = client;
		}
%s
	}`, *service.Name, *service.Name, inner)
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := strings.Title(file.GeneratedFilenamePrefix) + "Client.pb.cs"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	if !strings.Contains(file.GeneratedFilenamePrefix, "tx") {
		g.Skip()
		return
	}

	var inner = ""
	for _, service := range file.Proto.Service {
		inner += generateService(service)
	}

	if inner == "" {
		g.Skip()
		return
	}

	g.P(fmt.Sprintf(`// <auto-generated>
//    Code generated by protoc-gen-cosmosCsharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardgame project and written by lxgr@protonmail.com
// </auto-generated>
#nullable enable

using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace %s {
	%s
}`, parsePathName("."+*file.Proto.Package), inner))
}
