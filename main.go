package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"strings"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func parsePathName(path string) string {
	paths := strings.Split(path, ".")

	var newPaths []string
	
	for _, p := range paths[1:] {
		newPaths = append(newPaths, strings.Title(p))
	}

	return strings.Join(newPaths, ".")
}

func generateMethod(msg *descriptorpb.MethodDescriptorProto) string {
	return fmt.Sprintf(`
		public Task<string> SendMsg%s(%s msg) {
			return EasyClient.BuildAndBroadcast(
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/%s"
				}
			);
		}
`,
		*msg.Name,
		parsePathName(*msg.InputType),
		strings.Trim(*msg.InputType, "."),
	)
}

func generateService(service *descriptorpb.ServiceDescriptorProto) string {
	var inner = ""
	for _, msg := range service.Method {
		inner += generateMethod(msg)
	}
	return fmt.Sprintf(`
	public class %sClient {
		public EasyClient EasyClient { get; }

		public %sClient (EasyClient client) {
			EasyClient = client;
		}
%s
	}`, *service.Name, *service.Name, inner)
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := strings.Title(file.GeneratedFilenamePrefix) + "Client.pb.cs"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	if !strings.Contains(file.GeneratedFilenamePrefix, "tx") {
		g.Skip()
		return
	}
	
	var inner = ""
	for _, service := range file.Proto.Service {
		inner += generateService(service)
	}

	if inner == "" {
		g.Skip()
		return
	}

	g.P(fmt.Sprintf(`// Code generated by lxgr
using Cosmcs.Client;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace %s {
	%s
}`, parsePathName("."+*file.Proto.Package), inner))
}
