// <auto-generated>
//    Code generated by protoc-gen-cosmos-csharp plugin.  DO NOT EDIT!
//    The plugin is part of the DecentralCardGame project and written by lxgr@protonmail.com
//    source: {{ .Source }}
// </auto-generated>
#nullable enable

using System;
using Cosmcs.Client;
using Cosmcs.Tx;
using System.Threading.Tasks;
using Google.Protobuf.WellKnownTypes;
using Google.Protobuf;

namespace {{ .NameSpace }} {
	{{ range .Clients }}
	public class {{ .Name }}Client {
		public IClient Client { get; }

		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public {{ .Name }}Client (IClient client) {
			Client = client;
		}
        {{ range .SendMethods }}
        /// <summary>
      	/// SendMsg{{ .Name }} sends a {{ .InputType }} transaction to the blockchain and waits
      	/// for a response.
      	/// </summary>
      	/// <param name="msg">The {{ .InputType }} message that should be send.</param>
      	/// <param name="fee">The fees that will be paid.</param>
        [global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
        public Task<Cosmcs.Client.ClientResponse<{{ .OutputType }}>> SendMsg{{ .Name }}({{ .InputType }} msg, Cosmcs.Tx.Fee? fee = null) {
			return Client.BuildAndBroadcast(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/{{ .TypeUrl }}"
				}},
				fee
			).ContinueWith(r =>
			{
				var res = r.Result;
				if (res.TxResponse.Code != 0)
				{
					return res.TxResponse;
				}
				System.Threading.Thread.Sleep(13000);
				return Client.QueryTx(res.TxResponse.Txhash).Result.TxResponse;
			})
			.ContinueWith(r => new Cosmcs.Client.ClientResponse<{{ .OutputType }}>(
				r.Result,
				{{ .OutputType }}.Parser
			));
		}

		/// <summary>
      	/// SimulateMsg{{ .Name }} simulates a {{ .InputType }} transaction on the blockchain.
      	/// </summary>
      	/// <param name="msg">The {{ .InputType }} message that should be simulated.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmos.Tx.V1beta1.SimulateResponse> SimulateMsg{{ .Name }}({{ .InputType }} msg) {
			return Client.BuildAndSimulate(new Any[] {
				new Any
				{
					Value = msg.ToByteString(),
					TypeUrl = "/{{ .TypeUrl }}"
				}}
			);
		}

		/// <summary>
      	/// SimulateAndSendMsg{{ .Name }} simulates, estimates fees and then sends a {{ .Name }} transaction to the blockchain.
      	/// </summary>
      	/// <param name="msg">The {{ .InputType }} message that should be send.</param>
		[global::System.CodeDom.Compiler.GeneratedCode("protoc-gen-cosmos-csharp", null)]
		public Task<Cosmcs.Client.ClientResponse<{{ .OutputType }}>> SimulateAndSendMsg{{ .Name }}({{ .InputType }} msg) {
			return SimulateMsg{{ .Name }}(msg).ContinueWith(r => {
				return SendMsg{{ .Name }}(msg, new Cosmcs.Tx.Fee((ulong) Math.Ceiling(r.Result.GasInfo.GasUsed * 1.5))).Result;
			});
		}
        {{ end }}
	}
	{{ end }}
}